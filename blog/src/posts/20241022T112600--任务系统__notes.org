#+title:      任务系统
#+date:       [2024-10-22 Tue 11:26]
#+filetags:   :notes:
#+identifier: 20241022T112600
#+description: 如何设计一个游戏中的任务系统
* 任务系统
定义: 完成一些列条件获得奖励
直接根据任务id划分任务类型

** 主线任务
- ~TaskGroup1~
- 可以主动接 也可以创建账号时自动接
- ~同一时间只能存在 1 个~
- 存档: 维护一个当前正在进行的主线任务ID
** 支线任务
- ~TaskGroup2~
- 可以主动接 也可以自动接
- ~同一时间存在 1-N 个~
- 存档: 维护一个已经完成支线任务的列表 以及一个全局计数器(这样任务可以追溯)
** 章节任务
- ~TaskGroup3~
- 完成所有的本章所有任务后 接取下一章的任务
- 存档: 维护一个已经完成章节任务的列表
** 每日任务
- ~TaskGroup4~
- 每天登陆后接取 跨天刷新全部日常任务 也可以手动刷新(消耗)
- 存档: 维护一个日常任务列表的存档

* 类图设计
使用 ~mermaid~ 设置并生成类图

#+begin_src mermaid :file ../assets/task.png
classDiagram
    Task <|-- MainTask
    Task <|-- SideLineTask
    Task <|-- ChapterTask
    Task <|-- DailyTask
    MainTask <|-- MainTask.xlsx
    SideLineTask <|-- SideLineTask.xlsx
    ChapterTask <|-- ChapterTask.xlsx
    DailyTask <|-- DailyTask.xlsx
    TaskGroup <-- Task
    TaskType <-- Task
    TaskCompoentSystem<--TaskCompoent
    class MainTask {
        同一时间只有一个主线
        做完一个自动接取下一个
    }

    class SideLineTask {
        支线可以有多个
    }

    class DailyTask {
        每日天
    }


    class TaskGroup {
        <<Enum>>
        MainTask = 1
        SideLineTask = 2
        ChapterTask = 3
        DailyTask = 4
    }

    class TaskType {
        <<Enum>>
        FinishGame = 1 //完成对局 p1 类型  p2 nil require 局数
        SetName = 2    //设置昵称
        OpenCard = 3   //开牌     p1 开牌类型 p2 分数  require 次数
        //TODO: 按需求增加类型和触发器即可

    }

    class Task {

    }

    class TaskCompoentSystem {
        + void ResetDaliyTask() 跨天调用 刷新每日任务
        + void ChangeTask(int taskId) 更换任务 需要消耗
        + config GetTaskConfig(int taskId)
        + TaskType GetTaskType(int taskId)
        + void TaskAccept(int taskId) 接任务(如果需要接)
        + bool CheckTaskFinish(taskStatistics, type, p1, p2, require) 检查任务是否完成
        + int GetStatisticsNum(taskStatistics, type, arg) 获取完成次数
        + void TaskFinish(int taskId)
        - void finishMainLineTask(int taskId)  完成主线任务
        - void finishSideLineTask(int taskId)  完成支线任务
        - void finishChapterLineTask(int taskId) 完成章节任务
        - void finishDailyLineTask(int taskId)   完成日常任务
    }

    class TaskSchedule {
        + bool finish = false 是否已经完成
        + int p1
        + int taskSchedule

    }

    class TaskCompoent {
        static List<TaskId> finishTasks 已经完成的任务
        static Dictionary<TaskType, Dictionary<p, count>> taskStatistics 计数器
        static Dictionary<TaskType, Dictionary<TaskId, TaskSchedule>> daliyTaskSchedule 每日任务进度
    }
#+end_src

#+begin_export html
<figure>
<img src="../assets/task.png" alt="lost" title="任务系统类图" width="600px">
<figcaption><span class="figure-number">Figure 1: </span>任务系统类图</figcaption>
</figure>
#+end_export

* 任务表格
- 每一个任务组对应一个任务表
- TaskMain.xlsm 主线任务
- TaskSide.xlsm 支线任务
- TaskChapter.xlsm 章节任务
- TaskDaily.xlsm 每日任务
